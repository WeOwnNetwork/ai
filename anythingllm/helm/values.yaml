# values.yaml for AnythingLLM - WeOwn Enterprise Security MVP-0.2
# SECURITY NOTE: No secrets should be stored in this file!
# All sensitive values are injected from Kubernetes secrets.
# Enterprise-grade security: Argon2id hashing, rate limiting, security headers, zero-trust networking

# Global configuration
global:
  # Namespace for deployment (can be overridden)
  namespace: "anything-llm"

# Deployment configuration
replicaCount: 1

# AnythingLLM application configuration
anythingllm:
  image:
    repository: mintplexlabs/anythingllm
    tag: "latest"  # Use specific version tags in production
    pullPolicy: IfNotPresent
  
  # Container port configuration
  containerPort: 3001
  
  # Environment variables (non-sensitive only)
  env:
    # Server configuration
    SERVER_PORT: "3001"
    STORAGE_DIR: "/app/server/storage"
    
    # LLM Configuration (will be overridden by secrets)
    # These are defaults - actual values come from K8s secrets
    LLM_PROVIDER: "openai"  # Can be: openai, azure, anthropic, localai, etc.
    
    # Vector Database Configuration
    VECTOR_DB: "lancedb"  # Default vector database
    
    # Embedding Configuration
    EMBEDDING_ENGINE: "native"  # Use built-in embeddings
    
    # Security settings
    DISABLE_TELEMETRY: "true"  # Privacy-first
    
  # Secret configuration - references to K8s secrets
  secrets:
    # Name of the secret containing sensitive environment variables
    secretName: "anythingllm-secrets"
    # Keys in the secret that will be mounted as environment variables
    keys:
      - ADMIN_EMAIL
      - ADMIN_PASSWORD
      - OPENAI_API_KEY
      - OPENAI_API_BASE
      - JWT_SECRET
  
  # Persistent storage configuration
  persistence:
    enabled: true
    storageClass: "do-block-storage"  # DigitalOcean Block Storage
    size: "20Gi"
    accessMode: ReadWriteOnce
    mountPath: "/app/server/storage"
  


  # Health checks - More forgiving timing to prevent premature restarts
  livenessProbe:
    enabled: true
    httpGet:
      path: /api/ping
      port: 3001
    initialDelaySeconds: 120  # Increased startup time allowance
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5       # More tolerant of temporary failures
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /api/ping
      port: 3001
    initialDelaySeconds: 60   # Increased readiness delay
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5       # More tolerant of temporary failures

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3001
  annotations: {}

# Ingress configuration for external access
ingress:
  enabled: true
  className: "nginx"
  domain: ""  # MUST be set during deployment for security
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/limit-connections: "50"
    nginx.ingress.kubernetes.io/limit-rps: "100"
  hosts:
    - host: ""  # DYNAMIC: Set via deployment --set ingress.domain=your-domain.com
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: anythingllm-tls
      hosts:
        - ""  # DYNAMIC: Set via deployment --set ingress.domain=your-domain.com

# Resource limits and requests - Optimized for WeOwn cluster efficiency
resources:
  limits:
    cpu: 1000m      # AI workload optimized allocation  
    memory: 512Mi   # Optimized for actual usage patterns (430Mi + buffer)
  requests:
    cpu: 200m       # Standard allocation matching cluster deployment
    memory: 256Mi   # Right-sized for predictable scheduling (matches cluster config)

# Security context - Container level (fsGroup removed - invalid for container context)
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # AnythingLLM needs write access for Prisma client modifications
  capabilities:
    drop:
      - ALL

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

# Node selection and affinity
nodeSelector: {}
affinity: {}
tolerations: []

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Enterprise Automatic Backup System
# Backups are ALWAYS enabled with configurable retention
# Zero data loss guarantee with enterprise compliance
backup:
  enabled: true
  # Backup schedule (daily at 2 AM)
  schedule: "0 2 * * *"
  # Retention policy (30 days for compliance)
  retentionDays: 30
  # Storage class for backups
  storageClass: "do-block-storage"
  # Backup size allocation
  size: "50Gi"
  # Encryption at rest (always enabled)
  encryption: true

# Data restore configuration (set when restoring)
restore:
  enabled: false
  # Timestamp of backup to restore (format: YYYYMMDD_HHMMSS)
  backupTimestamp: ""

# Pod labels
podLabels: {}

# Enterprise Security Configuration
security:
  # Argon2id password hashing (enterprise standard)
  argon2:
    enabled: true
    memory: 65536  # 64MB memory cost
    iterations: 3  # Time cost
    threads: 4     # Parallelism
  
  # Network Policy Configuration
  networkPolicy:
    enabled: true
    # Namespace fix for ingress-nginx compatibility
    autoFixIngressNamespace: true
    # Zero-trust egress restrictions
    restrictEgress: true
  
  # Security headers enforcement
  headers:
    enabled: true
    # HSTS enforcement
    hsts: "max-age=31536000; includeSubDomains; preload"
    # Content Security Policy
    csp: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; img-src 'self' data: https:; connect-src 'self' https:"
    # Additional security headers
    frameOptions: "DENY"
    contentTypeOptions: "nosniff"
    referrerPolicy: "strict-origin-when-cross-origin"
  
  # Pod Security Standards (Restricted Profile)
  podSecurity:
    enabled: true
    profile: "restricted"
    # Seccomp profile
    seccompProfile:
      type: RuntimeDefault
  
  # Container security scanning
  scanning:
    enabled: true
    # Fail deployment on high/critical vulnerabilities
    failOnHigh: false  # Set to true for maximum security
    failOnCritical: true
