# WordPress Enterprise Configuration
# Enhanced security, resource optimization, and user experience

## Global Configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "do-block-storage"

## Service Account Security
serviceAccount:
  create: true
  automount: false
  annotations: {}

# Pod Security Standards: Service Account Token Automount
automountServiceAccountToken: false

## Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

## cert-manager Configuration
certManager:
  email: "EMAIL_PLACEHOLDER"
  createClusterIssuer: false  # Use existing ClusterIssuer

## WordPress Configuration  
wordpress:
  enableMultisite: false
  
  ## WordPress Basic Settings
  wordpressUsername: admin
  wordpressEmail: "EMAIL_PLACEHOLDER"
  wordpressBlogName: "WordPress Site"
  wordpressScheme: https
  wordpressTablePrefix: "wp_"
  domain: "DOMAIN_PLACEHOLDER"
  wordpressExtraWpConfigContent: |
    define('WP_CACHE', true);
    define('DISABLE_FILE_EDITING', true);
    define('DISALLOW_FILE_MODS', true);
    define('FORCE_SSL_ADMIN', true);
    define('WP_AUTO_UPDATE_CORE', true);
  
  ## Container Image Configuration
  image:
    registry: docker.io
    repository: wordpress
    tag: 6.8.3-php8.3-apache
    pullPolicy: IfNotPresent
  
  ## Storage Configuration
  persistence:
    enabled: true
    
  ## Security Keys (auto-generated)
  security:
    authKey: "CHANGE_ME_AUTH_KEY"
    secureAuthKey: "CHANGE_ME_SECURE_AUTH_KEY"
    loggedInKey: "CHANGE_ME_LOGGED_IN_KEY"
    nonceKey: "CHANGE_ME_NONCE_KEY"
    authSalt: "CHANGE_ME_AUTH_SALT"
    secureAuthSalt: "CHANGE_ME_SECURE_AUTH_SALT"
    loggedInSalt: "CHANGE_ME_LOGGED_IN_SALT"
    nonceSalt: "CHANGE_ME_NONCE_SALT"

## Zero-Trust NetworkPolicy (Enterprise Security)
networkPolicy:
  enabled: true
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress: Only allow NGINX Ingress Controller and same namespace
  ingress:
  - from:
    # Allow NGINX Ingress Controller
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    # Allow same namespace communication
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: wordpress
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  
  # Egress: Restricted to essential services only
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # HTTPS for WordPress updates and plugins
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow communication with MariaDB and Redis in same namespace
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: wordpress
    ports:
    - protocol: TCP
      port: 3306  # MariaDB
    - protocol: TCP
      port: 6379  # Redis

## Replica Configuration
replicaCount: 1

## WordPress Configuration
wordpress:
  image:
    registry: docker.io
    repository: wordpress
    tag: "6.8.2-php8.3-apache"
    pullPolicy: IfNotPresent
    pullSecrets: []

  ## WordPress Admin User (Configured via installation wizard)
  # Leave empty to enable WordPress installation wizard
  wordpressUsername: ""
  wordpressEmail: ""
  wordpressPassword: ""

  ## WordPress Site Configuration
  wordpressBlogName: "Enterprise WordPress Site"
  wordpressScheme: https
  
  ## WordPress Extra WP Config Content
  wordpressExtraWpConfigContent: |
    // WordPress configuration
    define('WP_DEBUG', false);
    define('WP_DEBUG_LOG', false);
    define('WP_DEBUG_DISPLAY', false);
    define('AUTOMATIC_UPDATER_DISABLED', false);
    define('WP_AUTO_UPDATE_CORE', 'minor');
    define('DISALLOW_FILE_EDIT', true);
    define('FORCE_SSL_ADMIN', true);
    define('WP_MEMORY_LIMIT', '256M');
    
    // Disable WP-Cron (handled by Kubernetes CronJob)
    define('DISABLE_WP_CRON', true);
    
    // Performance optimizations
    define('WP_CACHE', true);
    define('WP_POST_REVISIONS', 3);
    define('AUTOSAVE_INTERVAL', 300);
    define('EMPTY_TRASH_DAYS', 7);
    
    // Security hardening
    ini_set('session.cookie_httponly', true);
    ini_set('session.cookie_secure', true);
    ini_set('session.use_only_cookies', true);
    
    // Enable object caching
    define('WP_CACHE_KEY_SALT', 'wordpress_cache_');
    
    // SMTP Configuration for reliable email delivery
    define('SMTP_FROM_EMAIL', 'roman@weown.email');
    define('SMTP_FROM_NAME', 'Roman DiDomizio');
    
    // Enable WordPress mail debug logging
    define('WP_MAIL_DEBUG', false);
  
  ## WordPress Security Keys (Generated automatically by deployment script)
  security:
    authKey: "AUTH_KEY_PLACEHOLDER"
    secureAuthKey: "SECURE_AUTH_KEY_PLACEHOLDER"
    loggedInKey: "LOGGED_IN_KEY_PLACEHOLDER"
    nonceKey: "NONCE_KEY_PLACEHOLDER"
    authSalt: "AUTH_SALT_PLACEHOLDER"
    secureAuthSalt: "SECURE_AUTH_SALT_PLACEHOLDER"
    loggedInSalt: "LOGGED_IN_SALT_PLACEHOLDER"
    nonceSalt: "NONCE_SALT_PLACEHOLDER"

  ## Persistence Configuration
  persistence:
    enabled: true
    storageClass: "do-block-storage"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    coreSize: 4Gi  # WordPress core files persistence
    # Separate volumes for security
    volumes:
      content:
        mountPath: /var/www/html/wp-content
        size: 8Gi
      config:
        mountPath: /var/www/html/wp-config-custom
        size: 100Mi
      cache:
        mountPath: /var/cache/wordpress
        size: 1Gi

  ## Extra environment variables
  extraEnvVars:
  - name: WORDPRESS_ENABLE_REDIS
    value: "yes"  # Enable Redis since we re-enabled it
  - name: APACHE_HTTP_PORT
    value: "8080"
  - name: WORDPRESS_CONFIG_EXTRA
    value: |
      define('WP_CACHE', true);
      define('DISABLE_FILE_EDITING', true);
      define('DISALLOW_FILE_MODS', true);
      define('FORCE_SSL_ADMIN', true);
      define('WP_AUTO_UPDATE_CORE', true);

  ## Init Containers (WordPress Hardening) - Disabled for resource optimization
  initContainers:
    enabled: false
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true

  ## Extra Init Containers for CI/CD wp-content sync
  extraInitContainers:
  - name: sync-wp-content
    image: "IMAGE_REPOSITORY_PLACEHOLDER:IMAGE_TAG_PLACEHOLDER"
    imagePullPolicy: Always
    command: ["rsync"]
    args: ["-av", "--delete", "/app/wp-content/", "/var/www/html/wp-content/"]
    volumeMounts:
    - name: wordpress-data
      mountPath: /var/www/html
    securityContext:
      runAsUser: 33
      runAsGroup: 33
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
        - ALL
    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi

  ## WordPress Security Context (Production Ready)
  security:
    automountServiceAccountToken: false
    runAsUser: 0  # Required for Apache port 80 binding
    runAsGroup: 0
    runAsNonRoot: false
    fsGroup: 33  # www-data for file permissions
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    capabilities: {}  # Use default capabilities for WordPress
    seccompProfile:
      type: RuntimeDefault

  ## Resource Configuration (WordPress Production Requirements - WeOwn Optimized)
  resources:
    limits:
      cpu: 400m        # Sufficient for plugin installations and intensive operations
      memory: 1Gi      # Prevents OOMKilled during plugin installs
      ephemeral-storage: 400Mi
    requests:
      cpu: 50m         # Updated to match cluster optimization
      memory: 256Mi    # Updated to match cluster optimization (prevents under-allocation)ed on actual 117-134Mi usage
      ephemeral-storage: 200Mi
  ## Health Checks (Production Ready)
  livenessProbe:
    enabled: true
    httpGet:
      path: /wp-admin/install.php
      port: 80
      httpHeaders:
      - name: Host
        value: localhost
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /wp-admin/install.php
      port: 80
      httpHeaders:
      - name: Host
        value: localhost
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  ## Auto-scaling Configuration (Disabled for single replica + RWO volumes)
  autoscaling:
    enabled: false  # Must be false when using ReadWriteOnce volumes

## General Configuration
replicaCount: 1

## Redis Configuration (Production Caching)
redis:
  enabled: false  # Disabled for initial deployment
  auth:
    enabled: false

## Environment Variables
extraEnvVars: []

## Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
  - host: ""
    paths:
    - path: /
      pathType: Prefix
  tls:
  - secretName: wordpress-tls
    hosts: []

## Service Configuration
service:
  type: ClusterIP
  port: 80

## Cron Jobs (Production Maintenance)
cron:
  enabled: true
  schedule: "*/15 * * * *"  # Every 15 minutes
  image:
    registry: docker.io
    repository: wordpress
    tag: 6.8.3-php8.3-apache
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

## Backup Configuration (Production Critical)
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30"  # 30 days
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

## MariaDB Configuration (Official MariaDB 11.6.2 LTS)
mariadb:
  enabled: false  # Using custom StatefulSet with official image

mariadbOfficial:
  enabled: true
  image: mariadb:11.6.2  # Official MariaDB LTS - no auto-updates
  auth:
    database: wordpress
    username: wordpress
    password: "MARIADB_PASSWORD_PLACEHOLDER"
    rootPassword: "MARIADB_ROOT_PASSWORD_PLACEHOLDER"
  
  ## Security Context (Pod Security Standards: Restricted)
  podSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault
  
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  
  ## Resource Configuration (MariaDB Memory-Optimized - WeOwn Standardized)
  resources:
    limits:
      cpu: 250m        # Optimized for database operations
      memory: 256Mi    # Right-sized for 90-130Mi actual usage
      ephemeral-storage: 1Gi
    requests:
      cpu: 50m         # Matches cluster optimization
      memory: 128Mi    # Matches cluster optimization (sufficient for MariaDB) optimization
  
  ## MariaDB Performance Tuning (2-node cluster optimized)
  configuration: |
    [mysqld]
    innodb_buffer_pool_size=64M   # Reduced for memory efficiency
    innodb_log_file_size=16M  # Reduced for faster startup
    query_cache_size=16M      # Reduced but still beneficial
    query_cache_limit=1M      # Conservative limit
    thread_cache_size=4       # Fewer threads for 2-node
    table_open_cache=128      # Reduced cache size
    performance_schema=OFF    # Keep disabled for efficiency
    innodb_flush_log_at_trx_commit=2  # Better performance

## Redis Cache Configuration (Lightweight for 2-node cluster)
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: "REDIS_PASSWORD_PLACEHOLDER"
  
  ## Resource limits for 2-node efficiency
  master:
    resources:
      limits:
        cpu: 50m
        memory: 48Mi
        ephemeral-storage: 150Mi
      requests:
        cpu: 10m
        memory: 24Mi
        ephemeral-storage: 50Mi
    
    persistence:
      enabled: false  # Disabled for performance in 2-node cluster
    
    ## Security context for Redis
    podSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
    
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault

## Service Configuration
service:
  type: ClusterIP  # Secure internal-only access
  port: 80
  targetPort: 80
  annotations: {}


## NetworkPolicy (Zero-Trust Security)
networkPolicy:
  enabled: true
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
    # Allow NGINX Ingress Controller
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - podSelector:
          matchLabels: {}
      ports:
      - protocol: TCP
        port: 8080
  egress:
    # Allow DNS resolution to kube-system namespace only
    - to:
      - namespaceSelector:
          matchLabels:
            name: kube-system
      ports:
      - protocol: UDP
        port: 53
      - protocol: TCP
        port: 53
    # Allow HTTPS outbound for WordPress updates/plugins
    - to: []
      ports:
      - protocol: TCP
        port: 443
    # Allow access to MariaDB
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: mariadb
      ports:
      - protocol: TCP
        port: 3306
    # Allow access to Redis (if enabled)
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: redis
      ports:
      - protocol: TCP
        port: 6379

## Backup Configuration (NEW - Enhanced Data Protection)
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 30  # Keep 30 days of backups
  storage:
    size: 20Gi
    storageClass: "do-block-storage"

## Monitoring & Observability
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /wp-json/wp/v2/
    port: http

## WordPress Plugins (Pre-configured)
plugins:
  security:
    - wordfence  # Security plugin
    - limit-login-attempts  # Brute force protection
  performance:
    - w3-total-cache  # Caching
    - smush  # Image optimization
  fluent:
    - fluentcrm  # CRM integration
    - fluentform  # Form builder
    - fluent-boards  # Project management
