# Matomo Enterprise Helm Chart Values
# WeOwn Cloud v0.9 - Production-Grade Configuration
# Enterprise Security Configuration - SOC2/ISO42001/GDPR Compliant
# Zero-Trust Architecture with Pod Security Standards: Restricted

global:
  # Domain configuration - set dynamically during deployment
  domain: ""
  email: ""
  
  # Image registry configuration
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "do-block-storage"  # DigitalOcean block storage

# Certificate Manager Configuration
certManager:
  createClusterIssuer: false  # Use existing or create during deployment

# Matomo Application Configuration
matomo:
  image:
    registry: docker.io
    repository: matomo
    tag: "5.4-apache"  # Updated to latest stable version
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  admin:
    username: "ADMIN_USER_PLACEHOLDER"
    password: "ADMIN_PASSWORD_PLACEHOLDER" 
    email: "EMAIL_PLACEHOLDER"
  archiveToken: "ARCHIVE_TOKEN_PLACEHOLDER"
  
  # Initial website configuration (first site to track)
  website:
    name: ""
    host: ""
  
  # Skip installation wizard (for automated deployments)
  skipInstall: false  # Set to true for migrations
  
  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Resource configuration (WeOwn cluster optimized)
  resources:
    requests:
      cpu: 100m       # WeOwn standard - sufficient for small/medium traffic
      memory: 256Mi   # WeOwn standard - basic Matomo operation
    limits:
      cpu: 500m       # WeOwn standard - handles traffic spikes
      memory: 1Gi     # WeOwn standard - prevents OOM during report generation
      ephemeral-storage: 1Gi
  
  # Security context (compatible with official Matomo image)
  podSecurityContext:
    runAsUser: 33  # www-data user
    runAsGroup: 33
    runAsNonRoot: true
    fsGroup: 33
    seccompProfile:
      type: RuntimeDefault
  
  securityContext:
    runAsUser: 33  # www-data user  
    runAsGroup: 33
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false  # Matomo needs to write files
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /index.php
      port: 80  # Apache serves on port 80
    initialDelaySeconds: 120  # Matomo takes time to initialize
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 6
  
  readinessProbe:
    httpGet:
      path: /index.php
      port: 80  # Apache serves on port 80
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 80  # Apache on port 80
  
  # Persistent storage for Matomo data
  persistence:
    enabled: true
    storageClass: "do-block-storage"
    accessMode: ReadWriteOnce
    size: 10Gi  # Analytics data, plugins, configurations
    
  # Volume mounts for writable areas
  volumeMounts:
    - name: matomo-data
      mountPath: /bitnami/matomo
    - name: tmp
      mountPath: /tmp
    - name: var-run
      mountPath: /var/run
    - name: php-sessions
      mountPath: /var/lib/php/sessions
  
  volumes:
    - name: tmp
      emptyDir: {}
    - name: var-run
      emptyDir: {}
    - name: php-sessions
      emptyDir: {}

# External Database Configuration - DISABLED (using built-in MariaDB)
externalDatabase:
  enabled: false

# Built-in MariaDB Database Configuration
mariadb:
  enabled: true  # Deploy MariaDB with Matomo
  
  # Authentication configuration
  auth:
    username: "mariadb-admin"  # Production-grade database user
    password: ""  # Generated automatically by deploy script
    rootPassword: ""  # Generated automatically by deploy script
    database: "matomo"  # Database name
  
  # Resource configuration (WeOwn cluster optimized)  
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 512Mi

# Ingress Configuration (HTTPS/TLS)
ingress:
  enabled: true
  className: "nginx"
  
  annotations:
    # Force HTTPS redirect
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # TLS 1.3 with strong cipher suites (Enterprise Security)
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305"
    
    # Large uploads for importing analytics data
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/client-max-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    
    # Rate limiting (DDoS protection)
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "20"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: "DOMAIN_PLACEHOLDER"
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: matomo-tls
      hosts:
        - "DOMAIN_PLACEHOLDER"

# NetworkPolicy (Zero-Trust Security)
networkPolicy:
  enabled: true
  
  # Ingress rules
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
    # Allow same-namespace communication (Matomo <-> MariaDB)
    - from:
        - podSelector: {}
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 3306
  
  # Egress rules (restrictive)
  egress:
    # DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # HTTPS for updates and plugins
    - to: []
      ports:
        - protocol: TCP
          port: 443
    # HTTP for GeoIP database updates
    - to: []
      ports:
        - protocol: TCP
          port: 80
    # Database connections (MariaDB in same namespace)
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: matomo
              app.kubernetes.io/component: mariadb
      ports:
        - protocol: TCP
          port: 3306

# CronJob for Matomo Archive Processing
# Matomo requires regular archiving of analytics data for performance
cronjob:
  enabled: true
  schedule: "5 * * * *"  # Every hour at 5 minutes past
  concurrencyPolicy: Replace
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  
  # Archive processing resources
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 512Mi

# Autoscaling (HPA) - Optional
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# RBAC Configuration
rbac:
  create: true

serviceAccount:
  create: true
  annotations: {}
  automount: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node affinity and tolerations
affinity: {}
nodeSelector: {}
tolerations: []

# Backup Configuration (Analytics Database)
backup:
  enabled: true
  schedule: "0 3 * * *"  # Daily at 3 AM UTC
  retention: 30  # Keep backups for 30 days
  
  # Backup storage
  storage:
    size: "20Gi"
    className: "do-block-storage"

# Production Monitoring
monitoring:
  enabled: true
  
  # Resource alerts (for future Prometheus integration)
  alerts:
    cpu:
      warning: 70  # Warn at 70% CPU usage
      critical: 90  # Critical at 90% CPU usage
    memory:
      warning: 80  # Warn at 80% memory usage  
      critical: 95  # Critical at 95% memory usage
    storage:
      warning: 80  # Warn at 80% storage usage
      critical: 90  # Critical at 90% storage usage
  
  # Health check intervals
  healthChecks:
    interval: "5m"  # Check every 5 minutes
    timeout: "30s"  # 30 second timeout
    failureThreshold: 3  # Fail after 3 consecutive failures
